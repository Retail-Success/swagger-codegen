using System;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Options;
using Refit;
using RetailSuccess.Authentication.Tokens;
using RetailSuccess.Authentication.Tokens.ClientToken;
using RetailSuccess.Authentication.Tokens.ResourceOwnerCredentialUserToken;
using RetailSuccess.Authentication.Tokens.UserToken;
using {{packageName}}.{{apiPackage}};
using System.Linq;

namespace {{packageName}}
{
    public static class DependencyInjectionExtensions
    {
        public static IServiceCollection Add{{serviceName}}Client(
            this IServiceCollection services,
            Action<{{serviceName}}ClientOptions> clientOptions,
            Action<IdentityOptions> identityOptions,
            AuthenticationTypes authenticationType)
        {            
            var clientBuilder = ConfigureClientBuilder(services, clientOptions);
            var apiScopes = ApiScope.ParseScopes(new string[]{ {{#apiScopes}}"{{.}}"{{^-last}},{{/-last}}{{/apiScopes}} }).ToArray();
            
            switch (authenticationType)
            {
                case AuthenticationTypes.Client:
                    clientBuilder.AddClientTokenHandlers(identityOptions, apiScopes); // Add in appropriate scopes here
                    break;
                case AuthenticationTypes.User:
                    clientBuilder.AddUserTokenHandlers();
                    break;
                default:
                    throw new ArgumentException($"AuthenticationType {authenticationType} is not handled.");
            }

            return services;
        }

        public static IServiceCollection Add{{serviceName}}Client(
            this IServiceCollection services,
            Action<{{serviceName}}ClientOptions> clientOptions,
            Action<IdentityOptions> identityOptions,
            ResourceOwnerCredentials credentials)
        {
            var clientBuilder = ConfigureClientBuilder(services, clientOptions);
            var apiScopes = ApiScope.ParseScopes(new string[]{ {{#apiScopes}}"{{.}}"{{^-last}},{{/-last}}{{/apiScopes}} }).ToArray();
            clientBuilder.AddResourceOwnerCredentialUserTokenHandlers(identityOptions, credentials, apiScopes);
            return services;
        }

        public static IHttpClientBuilder ConfigureClientBuilder(IServiceCollection services, Action<{{serviceName}}ClientOptions> clientOptions)
        {
            services.Configure(clientOptions);

            var clientBuilder = services.AddRefitClient<I{{serviceName}}Client>()
                .ConfigureHttpClient((serviceProvider, client) =>
                {
                    client.BaseAddress =
                        new Uri(serviceProvider.GetService<IOptions<{{serviceName}}ClientOptions>>()
                            .Value.ApiBaseUrl);
                });

            services.AddTransient<{{serviceName}}Client>(serviceProvider => 
                new {{serviceName}}Client(
                    serviceProvider.GetRequiredService<I{{serviceName}}Client>()
                )
            );
            
            return clientBuilder;
        }
    }
}